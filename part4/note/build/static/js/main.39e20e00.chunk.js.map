{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportant","label","important","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","catch","error","console","log","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","err","notesToShow","filter","map","toggleImportance","find","n","changedNote","returnedNote","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","placeholder","type","ReactDOM","render","document","getElementById"],"mappings":"yKAYeA,EAVF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,gBAEdC,EAAQF,EAAKG,UAAY,qBAAsB,iBAErD,OACE,+BAAKH,EAAKI,QACV,wBAAQC,QAASJ,EAAjB,SAAoCC,Q,gBCNlCI,EAAU,aAqBD,EAnBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAiB9B,EAdA,SAACC,GAEZ,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAY9B,EATA,SAACG,EAAIF,GAEhB,OADcL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC7BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QACxCK,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OC+DLG,EA7EH,SAACC,GAEX,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEAC,qBAAW,WACTC,IACCrB,MAAK,SAAAsB,GACJP,EAASO,MACRf,OAAM,SAAAgB,GAAG,OAAId,QAAQC,IAAIa,QAG3B,IAEH,IAoCMC,EAAeN,EAAUJ,EAAQA,EAAMW,QAAO,SAAAlC,GAAI,OAAIA,EAAKG,aAKjE,OACE,gCACE,uCACA,8BACE,yBAAQW,GAAG,cAAcT,QAAS,kBAAIuB,GAAYD,IAAlD,kBACQA,EAAU,YAAa,WAGjC,6BACGM,EAAYE,KAAI,SAACnC,GAAD,OACb,cAAC,EAAD,CAAoBA,KAAMA,EAAMoC,iBAAkB,kBA/BjC,SAACtB,GAE1B,IAAMd,EAAOuB,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAExB,KAAOA,KAChCyB,EAAW,2BAAOvC,GAAP,IAAaG,WAAYH,EAAKG,YAE/C2B,EACUhB,EAAIyB,GACX9B,MAAK,SAAA+B,GACHhB,EAASD,EAAMY,KAAI,SAAAnC,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAOwC,SAErDxB,OAAM,SAAAgB,GACLS,MAAM,aAAD,OAAczC,EAAKI,QAAnB,sCACLoB,EAASD,EAAMW,QAAO,SAAAI,GAAC,OAAIA,EAAExB,KAAOA,SAmBwB4B,CAAmB1C,EAAKc,MAArEd,EAAKc,SAGtB,uBAAM6B,SAtDM,SAACC,GACfA,EAAMC,iBACN,IAAIC,EAAa,CACf1C,QAASqB,EACTsB,MAAM,IAAIC,MAAOC,cACjB9C,UAAW+C,KAAKC,SAAW,IAG7BrB,EAAmBgB,GAChBrC,MAAK,SAAA+B,GACJhB,EAASD,EAAM6B,OAAOZ,IACtBd,EAAW,QA2Cb,UACE,uBAAO2B,MAAO5B,EAAS6B,SAxCJ,SAACV,GACxBlB,EAAW,GAAD,OAAIkB,EAAMW,OAAOF,QAC3BnC,QAAQC,IAAI,aAAcyB,EAAMW,OAAOF,QAsCgBG,YAAY,aAC/D,wBAAQC,KAAK,SAAb,yBCtERC,IAASC,OAAQ,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.39e20e00.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportant }) => {\n\n  const label = note.important ? 'make not important': 'make important'\n\n  return (\n    <li>{note.content} \n    <button onClick={toggleImportant} >{label}</button></li>\n  )\n}\n\nexport default Note","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject);\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    let request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n    .catch(error => {\r\n        console.log(error)\r\n    })\r\n}\r\n\r\n\r\nexport default { getAll, create, update }\r\n","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = (props) => {\n\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n  useEffect( () => {\n    noteService.getAll()\n    .then(initialNotes => {\n      setNotes(initialNotes)\n    }).catch(err => console.log(err))\n  \n  \n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    let noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5\n    }\n\n    noteService.create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(`${event.target.value}`);\n    console.log('new note: ', event.target.value)\n  }\n\n  const toggleImportanceOf = (id) => {\n\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n         setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(err => {\n        alert(`the note '${note.content}' was already deleted from server`)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const notesToShow = (showAll ? notes : notes.filter(note => note.important))\n\n  \n\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div >\n        <button id='show-button' onClick={()=>setShowAll(!showAll)}>\n          Show {showAll ? 'important': 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => \n            <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />\n        )}\n      </ul>\n      <form onSubmit={addNote} >\n        <input value={newNote} onChange={handleNoteChange} placeholder='New note' />\n        <button type='submit'>Save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\n\n\n\nReactDOM.render( <App />, document.getElementById('root'))"],"sourceRoot":""}